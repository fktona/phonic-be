# Swagger schema
components:
  schemas:
    Agent:
      type: object
      required:
        - id
        - firstMessage
        - style
        - name
        - instructions
        - voice
      properties:
        id:
          type: string
          description: The unique ID of the agent.
        firstMessage:
          type: string
          description: The first message the agent sends.
        style:
          type: string
          description: The style of the agent.
        name:
          type: string
          description: The name of the agent.
        instructions:
          type: string
          description: The instructions for the agent.
        voice:
          type: string
          description: The voice associated with the agent.
        battlesFirst:
          type: array
          items:
            $ref: '#/components/schemas/Battle'
          description: List of battles where the agent is the first participant.
        battlesSecond:
          type: array
          items:
            $ref: '#/components/schemas/Battle'
          description: List of battles where the agent is the second participant.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the agent was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the agent was last updated.
      example:
        id: 'agent123'
        firstMessage: 'Hello, how can I assist you?'
        style: 'Friendly'
        name: 'AssistantBot'
        instructions: 'Assist the user in various tasks.'
        voice: 'Alexa'
        battlesFirst: []
        battlesSecond: []
        createdAt: '2025-01-09T00:00:00Z'
        updatedAt: '2025-01-09T01:00:00Z'

    CreateAgent:
      type: object
      required:
        - firstMessage
        - style
        - name
        - instructions
        - voice
      properties:
        firstMessage:
          type: string
          description: The first message the agent sends.
        style:
          type: string
          description: The style of the agent.
        name:
          type: string
          description: The name of the agent.
        instructions:
          type: string
          description: The instructions for the agent.
        voice:
          type: string
          description: The voice associated with the agent.
      example:
        firstMessage: 'Hello, how can I help you?'
        style: 'Polite'
        name: 'SupportBot'
        instructions: 'Provide user support.'
        voice: 'Google Assistant'

    UpdateAgent:
      type: object
      properties:
        firstMessage:
          type: string
          description: The first message the agent sends.
        style:
          type: string
          description: The style of the agent.
        name:
          type: string
          description: The name of the agent.
        instructions:
          type: string
          description: The instructions for the agent.
        voice:
          type: string
          description: The voice associated with the agent.
      example:
        firstMessage: 'How can I assist you today?'
        style: 'Helpful'
        name: 'HelpBot'
        instructions: 'Provide technical assistance.'
        voice: 'Siri'

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: USER

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
